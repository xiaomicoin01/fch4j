package org.freecash.math.util;

import org.apache.commons.math3.distribution.NormalDistribution;
import org.springframework.util.CollectionUtils;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * @author wanglint
 * @date 2020/7/13 14:29
 **/
public class MathUtil {

    public static double normDist(List<Double> member, double target) {
        double avg = average(member);
        double std = standardDiviation(member);
        NormalDistribution normalDistributioin = new NormalDistribution(avg, std);
        return normalDistributioin.cumulativeProbability(target);
    }

    public static double average(List<Double> numbers) {
        return numbers.stream().mapToDouble(Double::doubleValue).average().orElse(0d);
    }

    public static double standardDiviation(List<Double> x) {
        int m = x.size();
        double dAve = average(x);
        double dVar = 0;
        for (int i = 0; i < m; i++) {
            dVar += (x.get(i) - dAve) * (x.get(i) - dAve);
        }
        return Math.sqrt(dVar/(m-1));
    }

    public static void main(String[] args) {
        List<Double> member = Arrays.asList(2.1519,2.269,2.2804,2.2646,2.1984,2.2265,2.1306,2.1305,2.1197,2.0738,2.0801,
                2.1256,2.1969,2.4547,2.4111,2.2512,2.2965,2.2063,2.1184,2.0575,2.0621,2.0631,2.072,2.0519,2.0283,2.0729,
                2.0778,2.0261,2.0413,2.0745,2.0754,2.1158,2.0841,2.1415,2.1208,2.0861,2.1343,2.0921,2.1325,2.1562,2.109,
                1.9927,1.9299,1.9281,1.9288,1.862,1.8708,1.8703,1.8716,1.9593,2.0756,2.0832,2.0823,2.0464,2.0068,1.9372,
                1.9114,1.8599,1.8631,1.8011,1.7942,1.786,1.7506,1.7246,1.7821,1.7304,1.7957,1.8023,1.7687,1.7248,1.701,
                1.7091,1.6994,1.654,1.6541,1.6571,1.7025,1.7642,1.8251,1.8258,1.8262,1.8124,1.8614,1.8705,1.8292,1.8029,
                1.7542,1.6655,1.6768,1.7071,1.7373,1.6997,1.6882,1.6404,1.6026,1.5973,1.6204,1.5764,1.6154,1.5949,1.589,
                1.6009,1.5722,1.5704,1.5475,1.5624,1.5739,1.5353,1.5025,1.4359,1.4801,1.4763,1.4293,1.4762,1.4858,1.502,
                1.4585,1.4317,1.4081,1.3768,1.3856,1.377,1.4309,1.4956,1.4919,1.5421,1.587,1.5474,1.576,1.5689,1.6756,
                1.6637,1.5628,1.5873,1.5581,1.5358,1.5562,1.4466,1.4461,1.4334,1.4521,1.3732,1.3536,1.3671,1.3794,1.3697,
                1.3734,1.3397,1.3091,1.2599,1.2322,1.2608,1.2908,1.2547,1.2551,1.266,1.27,1.2921,1.2636,1.2454,1.26,
                1.3373,1.3019,1.2677,1.2708,1.2859,1.2675,1.2395,1.2199,1.1984,1.2041,1.2433,1.2431,1.2611,1.2224,1.199,
                1.2072,1.1941,1.1699,1.1631,1.1701,1.1539,1.1517,1.1816,1.1812,1.1616,1.158,1.1275,1.1519,1.1464,1.1424,
                1.1887,1.1596,1.1327,1.0848,1.0787,1.0894,1.0938,1.0949,1.0976,1.1215,1.1221,1.122,1.1332,1.1282,1.1392,
                1.1867,1.2264,1.2153,1.2237,1.2098,1.1693,1.2194,1.2043,1.1987,1.1945,1.1948,1.1926,1.183,1.1671,1.1485,
                1.132,1.1847,1.1711,1.297,1.5029,1.4413,1.5519,1.6079,1.7047,1.7392,1.8161,1.7798,1.6499,1.572,1.6414,
                1.6502,1.6757,1.5968,1.6721,1.7503,1.7176,1.7664,1.8686,2.0263,1.9908,1.9175,1.8195,1.7923,1.8625,1.7897,
                1.926,1.9918,1.6948,1.6237,1.5988,1.8581,1.7919,1.7618,1.5645,1.5701,1.6087,1.4319,1.3298,1.3926,1.3409,
                1.3387,1.3316,1.2997,1.3435,1.4008,1.412,1.3451,1.4033,1.3814,1.3897,1.3183,1.3611,1.3231,1.3803,1.4024,
                1.3661,1.2719,1.1836,1.182,1.1322,1.1187,1.1387,1.1188,1.2087,1.1861,1.2175,1.2095,1.1987,1.175,1.2032,
                1.1762,1.14,1.1183,1.0996,1.1036,1.1027,1.1395,1.1351,1.1276,1.1229,1.1479,1.1676,1.1982,1.1809,1.1808,
                1.1796,1.2197,1.2311,1.2168,1.2136,1.2107,1.1801,1.1935,1.1846,1.2018,1.2165,1.2106,1.1598,1.1794,1.1786,
                1.2226,1.2364,1.2364,1.186,1.1861,1.1853,1.2084,1.2104,1.2263,1.2403,1.2277,1.2414,1.2405,1.2516,1.2286,
                1.2225,1.2279,1.2379,1.23,1.2403,1.2248,1.2157,1.2075,1.1708,1.2025,1.1886,1.2422,1.2479,1.2537,1.2453,
                1.2765,1.2844,1.2893,1.34,1.3582,1.3656,1.3689,1.3415,1.3571,1.4099,1.3944,1.3909,1.3766,1.3884,1.386,
                1.3993,1.4127,1.4229,1.3544,1.3647,1.3879,1.3913,1.3513,1.3558,1.3423,1.3703,1.375,1.4074,1.4436,1.5117,
                1.5473,1.5488,1.3772,1.3969,1.4397,1.3894,1.4002,1.3835,1.3536,1.2957,1.2757,1.2928,1.2573,1.259,1.2379,
                1.2746,1.2863,1.2468,1.2321,1.2336,1.2923,1.254,1.2182,1.1851,1.2287,1.2389,1.2603,1.2165,1.2537,1.1997,
                1.2388,1.2158,1.2046,1.2085,1.2784,1.2962,1.2241,1.2171,1.2284,1.194,1.145,1.1501,1.1236,1.1313,1.1337,
                1.1337,1.0836,1.0777,1.0833,1.0934,1.1195,1.1329,1.1588,1.159,1.1972,1.2796,1.2217,1.2391,1.252,1.2401,
                1.2787,1.2614,1.3126,1.237,1.2181,1.1576,1.1362,1.1346,1.1442,1.1448,1.1667,1.2404,1.2374,1.2547,1.2389,
                1.2349,1.2508,1.215,1.1865,1.1977,1.2202,1.1991,1.2335,1.2411,1.2286,1.2147,1.2038,1.2351,1.2302,1.2398,
                1.1849,1.1874,1.1615,1.151,1.1456,1.156,1.1827,1.2196,1.2193,1.2422,1.2341,1.2209,1.1834,1.1394,1.1526,
                1.1791,1.1228,1.17,1.1149,1.0574,1.079,1.0594,1.0676,1.0863,1.0664,1.0654,1.066,1.0497,1.0354,1.0439,
                1.073,1.0676,1.1473,1.1548,1.242,1.3139);
        List<Double> temp = new ArrayList<>();
        for(int i = 1;i<member.size();i++){
            double t = normDist(member.subList(0,i+1),member.get(i));
            temp.add(t*100);
        }
        System.out.println(temp);

        member = Arrays.asList(2.1519,
                2.269,
                2.2804);
        System.out.println(average(member));
        System.out.println(standardDiviation(member));
        //System.out.println(normDist(member,2.1984));
    }
}
